#pragma once

enum class INPUT_FORMAT
{
	INPUT_FORMAT_UNKNOWN = 0,
	INPUT_FORMAT_R32G32B32A32_TYPELESS = 1,
	INPUT_FORMAT_R32G32B32A32_FLOAT = 2,
	INPUT_FORMAT_R32G32B32A32_UINT = 3,
	INPUT_FORMAT_R32G32B32A32_SINT = 4,
	INPUT_FORMAT_R32G32B32_TYPELESS = 5,
	INPUT_FORMAT_R32G32B32_FLOAT = 6,
	INPUT_FORMAT_R32G32B32_UINT = 7,
	INPUT_FORMAT_R32G32B32_SINT = 8,
	INPUT_FORMAT_R16G16B16A16_TYPELESS = 9,
	INPUT_FORMAT_R16G16B16A16_FLOAT = 10,
	INPUT_FORMAT_R16G16B16A16_UNORM = 11,
	INPUT_FORMAT_R16G16B16A16_UINT = 12,
	INPUT_FORMAT_R16G16B16A16_SNORM = 13,
	INPUT_FORMAT_R16G16B16A16_SINT = 14,
	INPUT_FORMAT_R32G32_TYPELESS = 15,
	INPUT_FORMAT_R32G32_FLOAT = 16,
	INPUT_FORMAT_R32G32_UINT = 17,
	INPUT_FORMAT_R32G32_SINT = 18,
	INPUT_FORMAT_R32G8X24_TYPELESS = 19,
	INPUT_FORMAT_D32_FLOAT_S8X24_UINT = 20,
	INPUT_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
	INPUT_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
	INPUT_FORMAT_R10G10B10A2_TYPELESS = 23,
	INPUT_FORMAT_R10G10B10A2_UNORM = 24,
	INPUT_FORMAT_R10G10B10A2_UINT = 25,
	INPUT_FORMAT_R11G11B10_FLOAT = 26,
	INPUT_FORMAT_R8G8B8A8_TYPELESS = 27,
	INPUT_FORMAT_R8G8B8A8_UNORM = 28,
	INPUT_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
	INPUT_FORMAT_R8G8B8A8_UINT = 30,
	INPUT_FORMAT_R8G8B8A8_SNORM = 31,
	INPUT_FORMAT_R8G8B8A8_SINT = 32,
	INPUT_FORMAT_R16G16_TYPELESS = 33,
	INPUT_FORMAT_R16G16_FLOAT = 34,
	INPUT_FORMAT_R16G16_UNORM = 35,
	INPUT_FORMAT_R16G16_UINT = 36,
	INPUT_FORMAT_R16G16_SNORM = 37,
	INPUT_FORMAT_R16G16_SINT = 38,
	INPUT_FORMAT_R32_TYPELESS = 39,
	INPUT_FORMAT_D32_FLOAT = 40,
	INPUT_FORMAT_R32_FLOAT = 41,
	INPUT_FORMAT_R32_UINT = 42,
	INPUT_FORMAT_R32_SINT = 43,
	INPUT_FORMAT_R24G8_TYPELESS = 44,
	INPUT_FORMAT_D24_UNORM_S8_UINT = 45,
	INPUT_FORMAT_R24_UNORM_X8_TYPELESS = 46,
	INPUT_FORMAT_X24_TYPELESS_G8_UINT = 47,
	INPUT_FORMAT_R8G8_TYPELESS = 48,
	INPUT_FORMAT_R8G8_UNORM = 49,
	INPUT_FORMAT_R8G8_UINT = 50,
	INPUT_FORMAT_R8G8_SNORM = 51,
	INPUT_FORMAT_R8G8_SINT = 52,
	INPUT_FORMAT_R16_TYPELESS = 53,
	INPUT_FORMAT_R16_FLOAT = 54,
	INPUT_FORMAT_D16_UNORM = 55,
	INPUT_FORMAT_R16_UNORM = 56,
	INPUT_FORMAT_R16_UINT = 57,
	INPUT_FORMAT_R16_SNORM = 58,
	INPUT_FORMAT_R16_SINT = 59,
	INPUT_FORMAT_R8_TYPELESS = 60,
	INPUT_FORMAT_R8_UNORM = 61,
	INPUT_FORMAT_R8_UINT = 62,
	INPUT_FORMAT_R8_SNORM = 63,
	INPUT_FORMAT_R8_SINT = 64,
	INPUT_FORMAT_A8_UNORM = 65,
	INPUT_FORMAT_R1_UNORM = 66,
	INPUT_FORMAT_R9G9B9E5_SHAREDEXP = 67,
	INPUT_FORMAT_R8G8_B8G8_UNORM = 68,
	INPUT_FORMAT_G8R8_G8B8_UNORM = 69,
	INPUT_FORMAT_BC1_TYPELESS = 70,
	INPUT_FORMAT_BC1_UNORM = 71,
	INPUT_FORMAT_BC1_UNORM_SRGB = 72,
	INPUT_FORMAT_BC2_TYPELESS = 73,
	INPUT_FORMAT_BC2_UNORM = 74,
	INPUT_FORMAT_BC2_UNORM_SRGB = 75,
	INPUT_FORMAT_BC3_TYPELESS = 76,
	INPUT_FORMAT_BC3_UNORM = 77,
	INPUT_FORMAT_BC3_UNORM_SRGB = 78,
	INPUT_FORMAT_BC4_TYPELESS = 79,
	INPUT_FORMAT_BC4_UNORM = 80,
	INPUT_FORMAT_BC4_SNORM = 81,
	INPUT_FORMAT_BC5_TYPELESS = 82,
	INPUT_FORMAT_BC5_UNORM = 83,
	INPUT_FORMAT_BC5_SNORM = 84,
	INPUT_FORMAT_B5G6R5_UNORM = 85,
	INPUT_FORMAT_B5G5R5A1_UNORM = 86,
	INPUT_FORMAT_B8G8R8A8_UNORM = 87,
	INPUT_FORMAT_B8G8R8X8_UNORM = 88,
	INPUT_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
	INPUT_FORMAT_B8G8R8A8_TYPELESS = 90,
	INPUT_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
	INPUT_FORMAT_B8G8R8X8_TYPELESS = 92,
	INPUT_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
	INPUT_FORMAT_BC6H_TYPELESS = 94,
	INPUT_FORMAT_BC6H_UF16 = 95,
	INPUT_FORMAT_BC6H_SF16 = 96,
	INPUT_FORMAT_BC7_TYPELESS = 97,
	INPUT_FORMAT_BC7_UNORM = 98,
	INPUT_FORMAT_BC7_UNORM_SRGB = 99,
	INPUT_FORMAT_AYUV = 100,
	INPUT_FORMAT_Y410 = 101,
	INPUT_FORMAT_Y416 = 102,
	INPUT_FORMAT_NV12 = 103,
	INPUT_FORMAT_P010 = 104,
	INPUT_FORMAT_P016 = 105,
	INPUT_FORMAT_420_OPAQUE = 106,
	INPUT_FORMAT_YUY2 = 107,
	INPUT_FORMAT_Y210 = 108,
	INPUT_FORMAT_Y216 = 109,
	INPUT_FORMAT_NV11 = 110,
	INPUT_FORMAT_AI44 = 111,
	INPUT_FORMAT_IA44 = 112,
	INPUT_FORMAT_P8 = 113,
	INPUT_FORMAT_A8P8 = 114,
	INPUT_FORMAT_B4G4R4A4_UNORM = 115,

	INPUT_FORMAT_P208 = 130,
	INPUT_FORMAT_V208 = 131,
	INPUT_FORMAT_V408 = 132,


	INPUT_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189,
	INPUT_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190,
};

enum INPUT_CLASSIFICATION
{
	INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0,
	INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1
};

struct INPUT_ELEMENT_DESC
{
	LPCSTR SemanticName;
	UINT SemanticIndex;
	INPUT_FORMAT Format;
	UINT InputSlot;
	UINT AlignedByteOffset;
	INPUT_CLASSIFICATION InputSlotClass;
	UINT InstanceDataStepRate;
};

struct ShaderCompileResult
{
#if _DX_PLATFORM
	Microsoft::WRL::ComPtr<ID3DBlob> mvsByteCode = nullptr;
	Microsoft::WRL::ComPtr<ID3DBlob> mpsByteCode = nullptr;
#endif
};

class FShader
{
public:
	FShader();
	~FShader();

private:
	std::wstring name;
	ShaderCompileResult compileResult;
	INPUT_ELEMENT_DESC inputLayout;
};

class FShaderManager
{
public:
	FShaderManager();
	~FShaderManager();

private:
	std::unordered_map<std::wstring, FShader> shaderMap;
};